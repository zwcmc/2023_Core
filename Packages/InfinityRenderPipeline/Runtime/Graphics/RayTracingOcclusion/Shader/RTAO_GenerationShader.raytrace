#include "../../../../Shaders/ShaderLibrary/BSDF.hlsl"
#include "../../../../Shaders/ShaderLibrary/Random.hlsl"
#include "../../../../Shaders/ShaderLibrary/RayTracing/Common/RayTracingCommon.hlsl"

#pragma max_recursion_depth 1

int RTAO_NumRays, RTAO_FrameIndex;
float RTAO_Radius;
float4 RTAO_TraceResolution;
float4x4 Matrix_Proj, Matrix_InvProj, Matrix_InvViewProj, Matrix_WorldToView;
Texture2D SRV_SceneDepth, SRV_GBufferNormal;
RWTexture2D<float> UAV_ScreenOcclusion;

[shader("raygeneration")]
void RayGeneration()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
	uint2 launchDim   = DispatchRaysDimensions().xy;
    float2 UV = dispatchIdx * RTAO_TraceResolution.zw;
    
    float SceneDepth = SRV_SceneDepth.SampleLevel(Global_point_clamp_sampler, UV, 0).x;
	float3 WorldNormal = SRV_GBufferNormal.SampleLevel(Global_point_clamp_sampler, UV, 0).xyz * 2 - 1;
	float3 NDCPos = GetNDCPos(UV, SceneDepth);
    float3 WorldPos = GetWorldSpacePos(NDCPos, Matrix_InvViewProj);
    float3x3 TangentToWorld = GetTangentBasis(WorldNormal);

	float OutOcclusion = 0;
    float RayHitDistance = 0;

    [loop]
	for (int i = 0; i < RTAO_NumRays; ++i) 
    {
		uint2 Random = Rand3DPCG16( uint3( dispatchIdx, fmod(RTAO_FrameIndex, 8) ) ).xy;
		float2 Hash = Hammersley16(i, (uint)RTAO_NumRays, Random);

        float3 TraceDir = CosineSampleHemisphere(Hash);
		float3 TraceDir_WS = mul(TraceDir, TangentToWorld);
		if (dot(WorldNormal, TraceDir_WS) <= 0) { continue; }

        RayDesc RayDescriptorAO;
        RayDescriptorAO.Origin    = WorldPos - 1e-4 * WorldNormal;              
        RayDescriptorAO.Direction = TraceDir_WS;                
        RayDescriptorAO.TMin      = 0;              
        RayDescriptorAO.TMax      = RTAO_Radius;

        AORayPayload RayIntersectionAO;
        TraceRay(_RaytracingSceneStruct, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, 0xFF, 0, 1, 0, RayDescriptorAO, RayIntersectionAO);

        OutOcclusion += RayIntersectionAO.HitDistance < 0 ? 1 : 0;
		if ( RayIntersectionAO.HitDistance > 0 ) {
			RayHitDistance = min(10, RayIntersectionAO.HitDistance);
		}
	}

    UAV_ScreenOcclusion[dispatchIdx] = OutOcclusion / RTAO_NumRays;
}