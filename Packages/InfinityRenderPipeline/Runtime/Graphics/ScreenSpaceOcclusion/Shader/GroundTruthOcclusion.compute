#include "Common.hlsl"
#include "Occlusion.hlsl"
#include "SpatialFilter.hlsl"

#pragma kernel OcclusionTrace
#pragma kernel OcclusionSpatialX
#pragma kernel OcclusionSpatialY
#pragma kernel OcclusionTemporal
#pragma kernel OcclusionUpsample
#pragma enable_d3d11_debug_symbols

RWTexture2D<float> UAV_OcclusionTexture;
[numthreads(16, 16, 1)]
void OcclusionTrace(uint3 id : SV_DispatchThreadID)
{
    float2 ScreenUV = (id.xy + 0.5) * Resolution.zw;
	uint2 PixelPosition = uint2(ScreenUV * Resolution.xy);

	float SceneDepth = SRV_DepthTexture.SampleLevel(Global_bilinear_clamp_sampler, ScreenUV + (float2(-0.5, -0.5) * Resolution.zw), 0).r;
	SceneDepth = max(SceneDepth, SRV_DepthTexture.SampleLevel(Global_bilinear_clamp_sampler, ScreenUV + (float2(0.5, -0.5) * Resolution.zw), 0).r);
	SceneDepth = max(SceneDepth, SRV_DepthTexture.SampleLevel(Global_bilinear_clamp_sampler, ScreenUV + (float2(-0.5, 0.5) * Resolution.zw), 0).r);
	SceneDepth = max(SceneDepth, SRV_DepthTexture.SampleLevel(Global_bilinear_clamp_sampler, ScreenUV + (float2(0.5, 0.5) * Resolution.zw), 0).r);

    if (SceneDepth <= 1e-7) 
    {
        UAV_OcclusionTexture[id.xy] = 1;
        return;
    }

	float3 ScreenPos = GetScreenSpacePos(ScreenUV, SceneDepth);
	float3 WorldPos = GetWorldSpacePos(ScreenPos, Matrix_InvViewProj);
	float3 ViewPos = GetViewSpacePosInvZ(ScreenPos, Matrix_InvProj);
	float3 ViewDir = GetViewDir(WorldPos, _WorldSpaceCameraPos);
	float3 WorldNormal = SRV_NormalTexture.SampleLevel(Global_bilinear_clamp_sampler, ScreenUV, 0).xyz * 2 - 1;
    float3 ViewNormal = mul((float3x3)Matrix_WorldToView, WorldNormal);
    ViewNormal.z = -ViewNormal.z;

    float Occlusion = GTAO(NumRay, NumStep, Radius, Power, HalfProjScale, TemporalOffset, TemporalDirection, SceneDepth, ScreenUV, PixelPosition, ViewPos, normalize(0 - ViewPos), ViewNormal, Resolution, Matrix_InvProj, SRV_DepthTexture, Global_point_clamp_sampler);
    UAV_OcclusionTexture[id.xy] = lerp(1, Occlusion, Intensity);
}

RWTexture2D<float> UAV_SpatialTexture;
[numthreads(16, 16, 1)]
void OcclusionSpatialX(uint3 id : SV_DispatchThreadID)
{
    float2 ScreenUV = (id.xy + 0.5) * Resolution.zw;
    UAV_SpatialTexture[id.xy] = BilateralBlur(ScreenUV, float2(Resolution.z, 0));
}

[numthreads(16, 16, 1)]
void OcclusionSpatialY(uint3 id : SV_DispatchThreadID)
{
    float2 ScreenUV = (id.xy + 0.5) * Resolution.zw;
    UAV_SpatialTexture[id.xy] = BilateralBlur(ScreenUV, float2(0, Resolution.w));
}

RWTexture2D<float> UAV_AccmulateTexture;
[numthreads(16, 16, 1)]
void OcclusionTemporal(uint3 id : SV_DispatchThreadID)
{
    float2 ScreenUV = (id.xy + 0.5) * Resolution.zw;
    float2 Velocity = SRV_MotionTexture.SampleLevel(Global_point_clamp_sampler, ScreenUV, 0);

    float TotalWeight = 0;
    float SampleWeights[9];
    float SampleColors[9];

    [unroll]
    for(uint i = 0; i < 9; i++) 
    {
        SampleColors[i] = SRV_OcclusionTexture.SampleLevel(Global_point_clamp_sampler, ScreenUV + (SampleOffset[i] * Resolution.zw), 0);
    }

    #if 0
        [unroll]
        for(uint j = 0; j < 9; j++) 
        {
            SampleWeights[j] = HdrWeight4(SampleColors[j], 5);
        }

        [unroll]
        for(uint k = 0; k < 9; k++) 
        {
            TotalWeight += SampleWeights[k];
        }  
        SampleColors[4] = (SampleColors[0] * SampleWeights[0] + SampleColors[1] * SampleWeights[1] + SampleColors[2] * SampleWeights[2] +  SampleColors[3] * SampleWeights[3] + SampleColors[4] * SampleWeights[4] + SampleColors[5] * SampleWeights[5] +  SampleColors[6] * SampleWeights[6] + SampleColors[7] * SampleWeights[7] + SampleColors[8] * SampleWeights[8]) / TotalWeight;
    #endif

    float m1 = 0; 
    float m2 = 0;

    [unroll]
    for(uint x = 0; x < 9; x++) 
    {
        m1 += SampleColors[x];
        m2 += SampleColors[x] * SampleColors[x];
    }

    float mean = m1 / 9;
    float stddev = sqrt( (m2 / 9) - pow2(mean) );

    float MinColor = mean - TemporalScale * stddev;
    float MaxColor = mean + TemporalScale * stddev;

    float CurrColor = SampleColors[4];
    float PrevColor = SRV_HistoryTexture.SampleLevel(Global_point_clamp_sampler, ScreenUV - Velocity, 0);
    MinColor = min(MinColor, CurrColor);
    MaxColor = max(MaxColor, CurrColor);
    PrevColor = clamp(PrevColor, MinColor, MaxColor);

	float VelocityWeight = saturate(TemporalWeight * (1 - length(Velocity) * 8));
    UAV_AccmulateTexture[id.xy] = lerp(CurrColor, PrevColor, VelocityWeight);
}

RWTexture2D<float> UAV_UpsampleTexture;
static const int2 UpsampleOffset[4] = { int2(0, 1), int2(1, 0), int2(-1, 0), int2(0, -1) };
[numthreads(16, 16, 1)]
void OcclusionUpsample(uint3 id : SV_DispatchThreadID)
{
    float2 ScreenUV = (id.xy + 0.5) * UpsampleSize.zw;			
	float TopLeft_Color = SRV_OcclusionTexture.SampleLevel(Global_bilinear_clamp_sampler, ScreenUV, 0).r;

    float DepthWeights[4];
	float SceneDepth = LinearEyeDepth(SRV_DepthTexture.SampleLevel(Global_bilinear_clamp_sampler, ScreenUV, 0).r);
    [unroll]
    for(int j = 0; j < 4; ++j) 
    {
        float OffsetDepth = LinearEyeDepth(SRV_DepthTexture.SampleLevel(Global_bilinear_clamp_sampler, ScreenUV + (UpsampleOffset[j] * UpsampleSize.zw), 0).r);
        DepthWeights[j] = 1 / (0.1 + abs(SceneDepth - OffsetDepth));
    }

    float NormalWeights[4];
	float3 WorldNomral = SRV_NormalTexture.SampleLevel(Global_bilinear_clamp_sampler, ScreenUV, 0).xyz * 2 - 1;
    [unroll]
    for(int i = 0; i < 4; ++i) 
    {
        float3 OffsetNormal = SRV_NormalTexture.SampleLevel(Global_bilinear_clamp_sampler, ScreenUV + (UpsampleOffset[i] * UpsampleSize.zw), 0).xyz * 2 - 1;
        NormalWeights[i] = pow(saturate(dot(OffsetNormal, WorldNomral)), 6);
    }

    float WeightSum = 0;
    float OcclusionSum = 0;
    [unroll]        
    for(int k = 0; k < 4; ++k) 
    {
        float Weight = DepthWeights[k] * NormalWeights[k];
        WeightSum += Weight;
        OcclusionSum += SRV_OcclusionTexture.SampleLevel(Global_bilinear_clamp_sampler, ScreenUV + (UpsampleOffset[k] * Resolution.zw), 0).r * Weight;
    }
    UAV_UpsampleTexture[id.xy] = OcclusionSum / WeightSum;
}