#include "UnityCG.cginc"
#include "../../../../Shaders/ShaderLibrary/BSDF.hlsl"
#include "../../../../Shaders/ShaderLibrary/Random.hlsl"
#include "../../../../Shaders/ShaderLibrary/Common.hlsl"
#include "../../../../Shaders/ShaderLibrary/RayTracing/Variance/VarianceEstimator.hlsl"
#include "../../../../Shaders/ShaderLibrary/RayTracing/ScreenSpaceRayTrace/SSRTRayCast.hlsl"

int SSR_NumRays, SSR_NumSteps, SSR_FrameIndex;
float SSR_BRDFBias, SSR_Thickness, SSR_Fadeness, SSR_Roughness, SSR_SpatialRadius, SSR_TemporalScale, SSR_TemporalWeight, ColorPyramidNumLOD;
float4 SSR_Resolution, SSR_FilterResolution;
float4x4 Matrix_Proj, Matrix_InvProj, Matrix_ViewProj, Matrix_InvViewProj, Matrix_LastViewProj, Matrix_WorldToView;
Texture2D SRV_DepthTexture, SRV_MotionTexture, SRV_NormalTexture, SRV_RoughnessTexture, SRV_HiCTexture, SRV_HiZTexture, SRV_HitPDFTexture, SRV_ColorMaskTexture, SRV_AliasingTexture, SRV_HistoryTexture;

static const float2 kStackowiakSampleSet0[56 * 4] =
{
	float2(-0.5, -0.5), float2(+0.5, -0.5), float2(-0.5, +0.5), float2(+0.5, +0.5),
	float2(-1.5, +0.5), float2(-1.5, -0.5), float2(-0.5, +1.5), float2(+1.5, -0.5),
	float2(+0.5, -1.5), float2(+2.5, -0.5), float2(+1.5, +0.5), float2(-0.5, -1.5),
	float2(-1.5, -2.5), float2(-0.5, -2.5), float2(-1.5, -1.5), float2(-0.5, +2.5),
	float2(-1.5, +1.5), float2(+1.5, -2.5), float2(-1.5, +2.5), float2(+1.5, +2.5),
	float2(+0.5, -2.5), float2(-2.5, -0.5), float2(-2.5, -1.5), float2(-2.5, +0.5),
	float2(+0.5, +1.5), float2(+0.5, +2.5), float2(-3.5, +0.5), float2(+0.5, +3.5),
	float2(+1.5, -1.5), float2(+3.5, -0.5), float2(+2.5, +1.5), float2(+3.5, +0.5),
	float2(+1.5, +1.5), float2(-2.5, +1.5), float2(-3.5, +2.5), float2(+3.5, +1.5),
	float2(-3.5, -0.5), float2(-1.5, -3.5), float2(-2.5, -2.5), float2(-2.5, +2.5),
	float2(+2.5, +0.5), float2(+2.5, +2.5), float2(+1.5, +3.5), float2(+3.5, -1.5),
	float2(-3.5, -2.5), float2(+3.5, -2.5), float2(+2.5, -1.5), float2(+0.5, -3.5),
	float2(-0.5, +3.5), float2(-0.5, -4.5), float2(-4.5, +0.5), float2(+4.5, +0.5),
	float2(-4.5, -1.5), float2(-3.5, +1.5), float2(-0.5, -3.5), float2(+1.5, -3.5),
	float2(+0.5, -4.5), float2(-1.5, +3.5), float2(+0.5, +4.5), float2(-3.5, -1.5),
	float2(-4.5, +1.5), float2(+2.5, -4.5), float2(+2.5, -2.5), float2(-1.5, +4.5),
	float2(-2.5, -4.5), float2(+4.5, -2.5), float2(+2.5, +3.5), float2(-3.5, +3.5),
	float2(-2.5, +3.5), float2(+0.5, -5.5), float2(-4.5, +3.5), float2(-2.5, -3.5),
	float2(-4.5, +2.5), float2(+3.5, +3.5), float2(+2.5, -3.5), float2(+4.5, +3.5),
	float2(+3.5, -3.5), float2(+4.5, +2.5), float2(-5.5, +1.5), float2(-4.5, -0.5),
	float2(+3.5, +2.5), float2(-0.5, +4.5), float2(-1.5, +5.5), float2(+1.5, +5.5),
	float2(+4.5, -0.5), float2(+5.5, +0.5), float2(+4.5, +1.5), float2(-1.5, -4.5),
	float2(-1.5, -5.5), float2(-4.5, -2.5), float2(-2.5, +5.5), float2(+2.5, +5.5),
	float2(+1.5, +4.5), float2(+5.5, +1.5), float2(+1.5, -4.5), float2(-3.5, -3.5),
	float2(+3.5, -4.5), float2(-3.5, -4.5), float2(+4.5, -1.5), float2(+4.5, -3.5),
	float2(-3.5, -5.5), float2(-2.5, -5.5), float2(-4.5, -3.5), float2(+4.5, +4.5),
	float2(-3.5, +4.5), float2(-2.5, +4.5), float2(-5.5, -2.5), float2(-5.5, +0.5),
	float2(+2.5, -5.5), float2(+3.5, +4.5), float2(-0.5, -5.5), float2(-0.5, +6.5),
	float2(+2.5, +4.5), float2(-5.5, -0.5), float2(-6.5, -1.5), float2(+1.5, -5.5),
	float2(-6.5, -0.5), float2(+0.5, +5.5), float2(+1.5, +6.5), float2(+6.5, +1.5),
	float2(-0.5, +5.5), float2(+6.5, -0.5), float2(-4.5, -4.5), float2(-5.5, +2.5),
	float2(+5.5, -0.5), float2(-5.5, -1.5), float2(-6.5, +3.5), float2(-1.5, +6.5),
	float2(-6.5, +0.5), float2(+4.5, -5.5), float2(-3.5, +6.5), float2(+6.5, -1.5),
	float2(+0.5, -6.5), float2(-5.5, -3.5), float2(+5.5, -2.5), float2(+4.5, -4.5),
	float2(+5.5, -1.5), float2(+3.5, -6.5), float2(+5.5, +3.5), float2(+3.5, -5.5),
	float2(-5.5, -4.5), float2(+6.5, -3.5), float2(-0.5, -6.5), float2(+3.5, +6.5),
	float2(-5.5, +3.5), float2(+0.5, +6.5), float2(+6.5, +0.5), float2(+6.5, -2.5),
	float2(-6.5, -3.5), float2(-4.5, +4.5), float2(-7.5, -0.5), float2(+7.5, +0.5),
	float2(+5.5, +2.5), float2(-0.5, -7.5), float2(+0.5, +7.5), float2(-4.5, +5.5),
	float2(+3.5, +5.5), float2(-3.5, +5.5), float2(-4.5, -5.5), float2(+4.5, +6.5),
	float2(+5.5, -4.5), float2(+4.5, +5.5), float2(-4.5, +6.5), float2(+6.5, +4.5),
	float2(-7.5, +1.5), float2(-6.5, +1.5), float2(+5.5, -3.5), float2(-6.5, +2.5),
	float2(-2.5, +6.5), float2(-1.5, -7.5), float2(+5.5, +4.5), float2(-1.5, -6.5),
	float2(-3.5, -7.5), float2(+2.5, -7.5), float2(-7.5, +2.5), float2(-6.5, -2.5),
	float2(-5.5, +5.5), float2(+2.5, +6.5), float2(-2.5, -6.5), float2(-7.5, +0.5),
	float2(-0.5, +7.5), float2(+7.5, -2.5), float2(-2.5, +7.5), float2(+0.5, -7.5),
	float2(-4.5, -7.5), float2(+7.5, +1.5), float2(+1.5, -6.5), float2(-6.5, +4.5),
	float2(-1.5, +7.5), float2(-5.5, -5.5), float2(+6.5, +2.5), float2(-3.5, -6.5),
	float2(+3.5, -7.5), float2(-5.5, +4.5), float2(+2.5, -6.5), float2(+1.5, -7.5),
	float2(+6.5, +3.5), float2(+5.5, -6.5), float2(-6.5, +5.5), float2(+7.5, +4.5),
	float2(+7.5, -1.5), float2(-7.5, -1.5), float2(+3.5, +7.5), float2(-5.5, +6.5),
	float2(+1.5, +7.5), float2(+7.5, +3.5), float2(+7.5, -0.5), float2(-7.5, -2.5),
	float2(+5.5, +5.5), float2(+6.5, +5.5), float2(+5.5, -5.5), float2(-2.5, -7.5),
	float2(+2.5, +7.5), float2(-7.5, -3.5), float2(-7.5, -4.5), float2(-6.5, -4.5),
	float2(+7.5, -3.5), float2(+5.5, +6.5), float2(-5.5, -6.5), float2(-4.5, -6.5),
	float2(+7.5, +2.5), float2(-7.5, +3.5), float2(+4.5, -6.5), float2(+7.5, -4.5),
};
static const float2 kStackowiakSampleSet1[56 * 4] =
{
    float2(-0.5, -0.5), float2(+0.5, -0.5), float2(-0.5, +0.5), float2(+0.5, +0.5),
    float2(+0.5, -1.5), float2(+1.5, -1.5), float2(-1.5, -0.5), float2(+1.5, +1.5),
    float2(-0.5, -2.5), float2(-1.5, -1.5), float2(+0.5, +1.5), float2(-1.5, +0.5),
    float2(+1.5, -0.5), float2(-0.5, +1.5), float2(-2.5, +0.5), float2(+0.5, +2.5),
    float2(-2.5, -1.5), float2(+2.5, +0.5), float2(+1.5, +0.5), float2(-0.5, -1.5),
    float2(-1.5, +1.5), float2(+2.5, -2.5), float2(-3.5, -0.5), float2(-1.5, +2.5),
    float2(-2.5, +1.5), float2(-2.5, -0.5), float2(-1.5, -2.5), float2(+2.5, -1.5),
    float2(-3.5, +0.5), float2(-0.5, -3.5), float2(-1.5, +3.5), float2(+0.5, -2.5),
    float2(+1.5, +2.5), float2(-0.5, +2.5), float2(+0.5, +3.5), float2(+3.5, +0.5),
    float2(+2.5, +1.5), float2(-2.5, -2.5), float2(+2.5, -0.5), float2(+3.5, -1.5),
    float2(-0.5, +3.5), float2(+3.5, +1.5), float2(-3.5, +2.5), float2(+3.5, +2.5),
    float2(+3.5, -0.5), float2(+0.5, -4.5), float2(-2.5, +3.5), float2(+0.5, -3.5),
    float2(-1.5, -4.5), float2(+1.5, +3.5), float2(+1.5, -2.5), float2(-3.5, +1.5),
    float2(+2.5, -3.5), float2(-2.5, -3.5), float2(+2.5, +2.5), float2(+1.5, +4.5),
    float2(-4.5, -2.5), float2(-2.5, +2.5), float2(-4.5, +1.5), float2(+4.5, +1.5),
    float2(-2.5, -4.5), float2(+3.5, -3.5), float2(-1.5, -3.5), float2(-3.5, -1.5),
    float2(+1.5, -4.5), float2(+4.5, -2.5), float2(+1.5, -3.5), float2(-1.5, +4.5),
    float2(-4.5, +2.5), float2(-4.5, -0.5), float2(+2.5, +4.5), float2(-4.5, +0.5),
    float2(-3.5, -4.5), float2(+0.5, +4.5), float2(+3.5, -2.5), float2(-3.5, -2.5),
    float2(-3.5, +3.5), float2(+3.5, +3.5), float2(+4.5, +0.5), float2(+0.5, +5.5),
    float2(-0.5, +4.5), float2(+4.5, -3.5), float2(-1.5, +5.5), float2(-0.5, -4.5),
    float2(+2.5, +3.5), float2(+4.5, +2.5), float2(-2.5, +5.5), float2(+2.5, -4.5),
    float2(+4.5, -0.5), float2(+5.5, -0.5), float2(-4.5, +4.5), float2(+5.5, -1.5),
    float2(-5.5, -1.5), float2(-4.5, -1.5), float2(+3.5, +4.5), float2(-3.5, -3.5),
    float2(-5.5, +0.5), float2(+1.5, -5.5), float2(-5.5, -2.5), float2(-3.5, +4.5),
    float2(+0.5, -5.5), float2(-2.5, -5.5), float2(+2.5, +5.5), float2(+4.5, +4.5),
    float2(+4.5, -1.5), float2(-2.5, +4.5), float2(+4.5, +3.5), float2(+0.5, +6.5),
    float2(-0.5, -6.5), float2(+5.5, +2.5), float2(-0.5, -5.5), float2(-5.5, -0.5),
    float2(-6.5, -1.5), float2(-0.5, +5.5), float2(-0.5, +6.5), float2(+6.5, -0.5),
    float2(+1.5, +5.5), float2(+1.5, -6.5), float2(+5.5, +0.5), float2(-5.5, +2.5),
    float2(+5.5, +1.5), float2(-5.5, +1.5), float2(-6.5, -0.5), float2(-1.5, -5.5),
    float2(-5.5, -4.5), float2(-4.5, +3.5), float2(-6.5, +1.5), float2(+2.5, -5.5),
    float2(+3.5, -5.5), float2(-5.5, -3.5), float2(+1.5, +6.5), float2(+6.5, +2.5),
    float2(+4.5, -4.5), float2(+3.5, -6.5), float2(-4.5, -4.5), float2(-4.5, -3.5),
    float2(-6.5, +2.5), float2(+3.5, +5.5), float2(+3.5, -4.5), float2(+5.5, -3.5),
    float2(-5.5, +4.5), float2(+6.5, -3.5), float2(-6.5, -2.5), float2(+5.5, +4.5),
    float2(-1.5, +6.5), float2(-0.5, -7.5), float2(-6.5, +3.5), float2(-5.5, +3.5),
    float2(-6.5, -4.5), float2(+7.5, -1.5), float2(-3.5, -5.5), float2(+3.5, +6.5),
    float2(+5.5, +3.5), float2(+7.5, +0.5), float2(+5.5, -2.5), float2(-6.5, +0.5),
    float2(-7.5, +1.5), float2(-3.5, -6.5), float2(+6.5, +0.5), float2(+7.5, +1.5),
    float2(-2.5, -7.5), float2(-3.5, +5.5), float2(-7.5, -0.5), float2(-3.5, +6.5),
    float2(-2.5, +6.5), float2(+4.5, -6.5), float2(-5.5, +5.5), float2(+4.5, -5.5),
    float2(+6.5, -2.5), float2(+6.5, +3.5), float2(-1.5, -6.5), float2(-1.5, +7.5),
    float2(+6.5, +1.5), float2(-5.5, -5.5), float2(+0.5, -6.5), float2(+7.5, +3.5),
    float2(+2.5, +6.5), float2(-4.5, +5.5), float2(-6.5, -3.5), float2(-4.5, -5.5),
    float2(-6.5, -5.5), float2(+5.5, -6.5), float2(-2.5, -6.5), float2(+5.5, -5.5),
    float2(+4.5, +5.5), float2(-7.5, +0.5), float2(+6.5, -1.5), float2(+0.5, -7.5),
    float2(+7.5, -0.5), float2(-3.5, -7.5), float2(+2.5, -6.5), float2(-3.5, +7.5),
    float2(-4.5, -7.5), float2(-0.5, +7.5), float2(-6.5, +5.5), float2(+7.5, -3.5),
    float2(-4.5, +6.5), float2(+1.5, +7.5), float2(+5.5, -4.5), float2(+7.5, +4.5),
    float2(+0.5, +7.5), float2(+4.5, +6.5), float2(-4.5, +7.5), float2(-7.5, -1.5),
    float2(+3.5, -7.5), float2(+7.5, -4.5), float2(+3.5, +7.5), float2(-1.5, -7.5),
    float2(+6.5, -4.5), float2(-7.5, -3.5), float2(+6.5, +4.5), float2(+2.5, -7.5),
    float2(+7.5, -2.5), float2(-7.5, +2.5), float2(+1.5, -7.5), float2(-5.5, +6.5),
    float2(+5.5, +5.5), float2(-2.5, +7.5), float2(+7.5, +2.5), float2(-7.5, -2.5),
    float2(+2.5, +7.5), float2(-6.5, +4.5), float2(+5.5, +6.5), float2(-4.5, -6.5),
};
static const int2 kStackowiakSampleSet2[16] = {int2(0, 0), int2(0, 1), int2(1, 0), int2(1, 1), int2(0, -1), int2(-1, -2), int2(-1, 0), int2(0, 2), int2(1, -1), int2(-1, 1), int2(-1, 2), int2(1, 2), int2(2, -1), int2(2, 0), int2(2, 1), int2(2, 2)};
static const int2 kStackowiakSampleSet3[9] = { int2(0, 0), int2(1, -1), int2(-1, -1), int2(0, 1), int2(1, 0), int2(1, 1), int2(0, -1), int2(-1, 0), int2(-1, 1) };
static const int2 kStackowiakSampleSet4[15] = { int2(0, 1), int2(-2, 1), int2(2, -3), int2(-3, 0), int2(1, 2), int2(-1, -2), int2(3, 0), int2(-3, 3), int2(0, -3), int2(-1, -1), int2(2, 1), int2(-2, -2), int2(1, 0), int2(0, 2), int2(3, -1) };
static const int2 kStackowiakSampleSet5[4] = { int2(0, 0), int2(0, 1), int2(1, 0), int2(1, 1) };

//RayTracing Pass
#pragma kernel Raytracing
RWTexture2D<float4> UAV_HitPDFTexture;
RWTexture2D<float4> UAV_ColorMaskTexture;
[numthreads(16, 16, 1)]
void Raytracing(uint3 id : SV_DispatchThreadID)
{
    float2 UV = (id.xy + 0.5) * SSR_Resolution.zw;
    uint2 PixelPosition = uint2(UV.xy * SSR_Resolution.xy);

    float SceneDepth = SRV_DepthTexture.SampleLevel(Global_bilinear_clamp_sampler, UV, 0).r;
    if (SceneDepth <= 1e-7) 
    {
        UAV_HitPDFTexture[id.xy] = 0;
        UAV_ColorMaskTexture[id.xy] = 0;
        return;
    }
    float Roughness = 1 - SRV_RoughnessTexture.SampleLevel(Global_bilinear_clamp_sampler, UV, 0).a;
    Roughness = clamp(Roughness, 0.02, 1);
    if (Roughness > SSR_Roughness) 
    {
        UAV_HitPDFTexture[id.xy] = 0;
        UAV_ColorMaskTexture[id.xy] = 0;
        return;
    }
    float3 NDCPos = GetNDCPos(UV, SceneDepth);
    float3 WorldPos = GetWorldSpacePos(NDCPos, Matrix_InvViewProj);
    float3 ViewPos = GetViewSpacePos(NDCPos, Matrix_InvProj);
    float3 ViewDir = GetViewDir(WorldPos, ViewPos);
    float3 WorldNormal = SRV_NormalTexture.SampleLevel(Global_bilinear_clamp_sampler, UV, 0).xyz * 2 - 1;
    float3x3 TangentToWorld = GetTangentBasis(WorldNormal);

    uint FrameIDMod8 = uint(fmod(SSR_FrameIndex, 8));
    uint2 Random = Rand3DPCG16(uint3(PixelPosition, FrameIDMod8)).xy;
    float StepOffset = InterleavedGradientNoise(PixelPosition + 0.5, FrameIDMod8) - 0.9;
    
    float4 Out_UVWPDF = 0;
    float4 Out_ColorMask = 0;

    [loop]
    for (uint i = 0; i < (uint)SSR_NumRays; ++i)
    {
        float2 Hash = Hammersley16(i, (uint)SSR_NumRays, Random);
        Hash.y = lerp(Hash.y, 0, SSR_BRDFBias);
        float4 LightDir_TS = ImportanceSampleGGX(Hash, Roughness);
        float3 LightDir_WS = mul(LightDir_TS.xyz, TangentToWorld);
        float3 LightDir_VS = mul((float3x3)(Matrix_WorldToView), LightDir_WS);
        LightDir_VS = reflect(normalize(ViewPos), LightDir_VS);

        float3 RayStartScreen = NDCPos;
        float4 RayEndScreen = mul(Matrix_Proj, float4(LightDir_VS, 0)) + float4(RayStartScreen, 1);
        RayEndScreen.xyz = rcp(max(RayEndScreen.w, 1e-4)) * RayEndScreen.xyz;
        float3 RayDepthScreen = 0.5 * (RayStartScreen + mul(Matrix_Proj, float4(0, 0, 1, 0)).xyz);
        float3 RayStepScreen = RayEndScreen.xyz - RayStartScreen;
        RayStepScreen *= GetStepScreenFactorToClipAtScreenEdge(RayStartScreen.xy, RayStepScreen.xy);
        float CompareTolerance = max(abs(RayStepScreen.z), (RayStartScreen.z - RayDepthScreen.z) * 2);

        float Level;
        float3 HitUVz;
        bool bHit = RayCast_Specular(SSR_NumSteps, 0.15, CompareTolerance, StepOffset, RayStartScreen, RayStepScreen, SRV_HiZTexture, HitUVz, Level);

        Out_UVWPDF.xyz = max(Out_UVWPDF.xyz, HitUVz);
        Out_UVWPDF.w += LightDir_TS.w;

        [branch]
        if (bHit) 
        {
            float3 SampleColor = SRV_HiCTexture.SampleLevel(Global_bilinear_clamp_sampler, HitUVz.xy, 0).rgb;
            SampleColor.rgb *= rcp(1 + Luminance(SampleColor.rgb));
            Out_ColorMask += float4(SampleColor.rgb, GetScreenFadeBord(HitUVz.xy, SSR_Fadeness));
        }
    }

    Out_UVWPDF.xyz = Out_UVWPDF.xyz;
    Out_UVWPDF.w *= rcp(SSR_NumRays);

    Out_ColorMask *= rcp(SSR_NumRays);
    Out_ColorMask.a = saturate(Out_ColorMask.a * Out_ColorMask.a);
    Out_ColorMask.rgb *= rcp(1 - Luminance(Out_ColorMask.rgb));

    UAV_HitPDFTexture[id.xy] = float4(Out_UVWPDF.xyz, max(1e-5, (Out_UVWPDF.w != 0) ? rcp(Out_UVWPDF.w) : 0));
    UAV_ColorMaskTexture[id.xy] = Out_ColorMask /* Out_ColorMask.a*/;
}

//SpatialFilter Pass
#define SSR_NumSpatial 15

float sqr(float a)
{
    return a * a;
}

float SSR_D(float Roughness, float NdotH)
{
	float m = Roughness * Roughness;
	float m2 = m * m;
	float D = m2 / (3.14 * sqr(sqr(NdotH) * (m2 - 1) + 1));
	return D;
}

float SSR_G(float Roughness, float NdotL, float NdotV)
{
	float m = Roughness * Roughness;
	float m2 = m * m;

	float G_L = 1.0f / (NdotL + sqrt(m2 + (1 - m2) * NdotL * NdotL));
	float G_V = 1.0f / (NdotV + sqrt(m2 + (1 - m2) * NdotV * NdotV));
	float G = G_L * G_V;
	return G;
}

float BRDF_UE4(float3 V, float3 L, float3 N, float Roughness)
{
    float3 H = normalize(L + V);
    float NdotH = saturate(dot(N,H));
    float NdotL = saturate(dot(N,L));
    float NdotV = saturate(dot(N,V));
    float D = SSR_D(Roughness, NdotH);
    float G = SSR_G(Roughness, NdotL, NdotV);
    return D * G;
}

float BRDF_SSR(float3 V, float3 L, float3 N, float Roughness)
{
	float3 H = normalize(L + V);

	float NoH = max(dot(N, H), 0);
	float NoL = max(dot(N, L), 0);
	float NoV = max(dot(N, V), 0);

	float D = D_GGX(NoH, Roughness);
    float G = Vis_SmithJoint_NoPI(NoL, NoV, Roughness);

    return max(0, D * G);
}

float GetEdgeStoppNormalWeight(float3 normal_p, float3 normal_q, float sigma)
{
    return pow(max(dot(normal_p, normal_q), 0.0), sigma);
}

float GetEdgeStopDepthWeight(float x, float m, float sigma)
{
    float a = length(x - m) / sigma;
    a *= a;
    return exp(-0.5 * a);
}

#pragma kernel SpatialFilter 
RWTexture2D<float4> UAV_SpatialTexture;
[numthreads(16, 16, 1)]
void SpatialFilter (uint3 id : SV_DispatchThreadID)
{
    float2 UV = (id.xy + 0.5) * SSR_FilterResolution.zw;
    uint2 PixelPosition = uint2(UV.xy * SSR_FilterResolution.xy);
	float SceneDepth = SRV_DepthTexture.SampleLevel(Global_bilinear_clamp_sampler, UV, 0).r;
    if (SceneDepth <= 1e-7) 
    {
        UAV_SpatialTexture[id.xy] = 0;
        return;
    }
	float3 WorldNormal = SRV_NormalTexture.SampleLevel(Global_bilinear_clamp_sampler, UV, 0).xyz * 2 - 1;
    //float Roughness = clamp( 1 - SRV_RoughnessTexture.SampleLevel(Global_bilinear_clamp_sampler, UV, 0).a, 0.02, 1 );
    //float3 ViewNormal = mul( (float3x3)Matrix_WorldToView, WorldNormal );
    //float3 NDCPos = GetNDCPos(UV, SceneDepth);
    //float3 WorldSpacePos = GetWorldSpacePos(NDCPos, Matrix_InvViewProj);
    //float3 ViewSpacePos = GetViewSpacePos(NDCPos, Matrix_InvProj);

	float NumWeight;
    //float3 MomentA, MomentB;
	float4 SpatialColor;
	uint2 Random = Rand3DPCG16( uint3(id.xy + 0.5, SSR_FrameIndex) ).xy;

	[loop]
	for (int i = 0; i < SSR_NumSpatial; ++i) {
        /*float2 OffsetRotation = (Hammersley16(i, SSR_NumSpatial, Random) * 2 - 1);
        float2x2 OffsetRotationMatrix = float2x2(OffsetRotation.x, OffsetRotation.y, -OffsetRotation.y, OffsetRotation.x);
        
        float2 Offset_UV = kStackowiakSampleSet4[i] * SSR_FilterResolution.zw;
        Offset_UV = UV + mul(OffsetRotationMatrix, Offset_UV * SSR_SpatialRadius);*/

        float2 Offset_UV = UV + (kStackowiakSampleSet4[i] * SSR_FilterResolution.zw);

        float OffsetDepth = SRV_DepthTexture.SampleLevel(Global_bilinear_clamp_sampler, Offset_UV, 0).r;
        float3 OffsetNormal = SRV_NormalTexture.SampleLevel(Global_bilinear_clamp_sampler, Offset_UV, 0).xyz * 2 - 1;

		//float4 HitUWVPDF = SRV_HitPDFTexture.SampleLevel(Global_bilinear_clamp_sampler, Offset_UV, 0);
		float4 HitColorMask = SRV_ColorMaskTexture.SampleLevel(Global_bilinear_clamp_sampler, Offset_UV, 0);
		//float3 HitViewPos = GetViewSpacePos(GetNDCPos(HitUWVPDF.xy, HitUWVPDF.z), Matrix_InvProj);

		///Variance Accmulation
        //MomentA += HitColorMask.rgb;
        //MomentB += HitColorMask.rgb * HitColorMask.rgb;

		//////Weight
        float DepthWeight = GetEdgeStopDepthWeight(SceneDepth, OffsetDepth, 0.001);
        float NormalWeight = GetEdgeStoppNormalWeight(WorldNormal, OffsetNormal, 64);
        //float BRDFWeight = BRDF_UE4(normalize(-ViewSpacePos), normalize(HitViewPos - ViewSpacePos), ViewNormal, Roughness) * HitUWVPDF.a;
		float Weight = DepthWeight * NormalWeight;
        NumWeight += Weight;

		///SpatioSampler
        SpatialColor += float4(HitColorMask.rgb * Weight, HitColorMask.a);
	}
	SpatialColor /= max(NumWeight, 0.00001);

    //MomentA /= SSR_NumSpatial;
    //MomentB /= SSR_NumSpatial;
    //float3 VarianceColor = (MomentB - MomentA * MomentA);
    //float Variance = max(VarianceColor.r, max(VarianceColor.g, VarianceColor.b));

    UAV_SpatialTexture[id.xy] = SpatialColor;
}

///Temporal Pass
#define VARIANCE_THRESHOLD 0.0005
static const int2 TemportalOffsets[9] = { int2(-1, -1), int2(0, -1), int2(1, -1), int2(-1, 0), int2(0, 0), int2(1, 0), int2(-1, 1), int2(0, 1), int2(1, 1) };
float ComputeTemporalVariance(float3 History_Radiance, float3 Radiance)
{
    // Check temporal variance. 
    float history_luminance = Luminance(History_Radiance);
    float luminance = Luminance(Radiance);
    return abs(history_luminance - luminance) / max(max(history_luminance, luminance), 0.00001);
}

#pragma kernel TemporalFilter
RWTexture2D<float4> UAV_AccmulateTexture;
[numthreads(16, 16, 1)]
void TemporalFilter (uint3 id : SV_DispatchThreadID)
{
    float2 UV = (id.xy + 0.5) * SSR_FilterResolution.zw;
    float HitDepth = SRV_HitPDFTexture.SampleLevel(Global_bilinear_clamp_sampler, UV, 0).z;
    float2 HitMotion = GetMotionVector(HitDepth, UV, Matrix_InvViewProj, Matrix_LastViewProj, Matrix_ViewProj);
    float2 DepthMotion = SRV_MotionTexture.SampleLevel(Global_bilinear_clamp_sampler, UV, 0).xy;

    float4 SampleColors[9]; 
    float4 CurrColor, PrevColor, MomentA, MomentB;

    [loop]
    for(int i = 0; i < 9; ++i) 
    {
        SampleColors[i] = SRV_AliasingTexture.SampleLevel(Global_bilinear_clamp_sampler, UV + (TemportalOffsets[i] * SSR_FilterResolution.zw), 0);
        MomentA += SampleColors[i];
        MomentB += SampleColors[i] * SampleColors[i];
    }

    float4 Mean = MomentA / 9;
    float4 Stddev = sqrt( (MomentB / 9) - pow2(Mean) );

    CurrColor = SampleColors[4];
    float4 MinColor = Mean - SSR_TemporalScale * Stddev;
    float4 MaxColor = Mean + SSR_TemporalScale * Stddev;
    MinColor = min(MinColor, CurrColor); 
    MaxColor = max(MaxColor, CurrColor);

    float2 PrevUV = UV - DepthMotion;
    float2 RayPrevUV = UV - HitMotion;

    if ( any(PrevUV < 0) && any(PrevUV > 1) && any(RayPrevUV < 0) && any(RayPrevUV > 1) ) 
    { 
		PrevColor = CurrColor;
	} else {
        //PrevColor = SRV_HistoryTexture.SampleLevel(Global_point_clamp_sampler, RayPrevUV, 0);
        //PrevColor = clamp(PrevColor, MinColor, MaxColor);

        float4 RayProject_PrevColor = SRV_HistoryTexture.SampleLevel(Global_point_clamp_sampler, RayPrevUV, 0);
        float4 RayProject_Dist = ( RayProject_PrevColor - Mean ) / Stddev;
        float RayProject_Weight = exp2(-10 * Luminance(RayProject_Dist));

        float4 DepthProject_PrevColor = SRV_HistoryTexture.SampleLevel(Global_point_clamp_sampler, PrevUV, 0);
        float4 DepthProject_Dist = (DepthProject_PrevColor - Mean) / Stddev;
        float DepthProject_Weight = exp2(-10 * Luminance(DepthProject_Dist));

        PrevColor = (RayProject_PrevColor * RayProject_Weight + DepthProject_PrevColor * DepthProject_Weight) / (RayProject_Weight + DepthProject_Weight);
        PrevColor = clamp(PrevColor, MinColor, MaxColor);
	}
	float BlendWeight = saturate(SSR_TemporalWeight * (1 - length(HitMotion) * 8) * (1 - length(DepthMotion) * 8));

    float4 Radiance = max(0.0001, lerp(CurrColor, PrevColor, BlendWeight));
    float Variance = ComputeTemporalVariance(PrevColor.rgb, Radiance.rgb) > VARIANCE_THRESHOLD ? 0 : 1;

	UAV_AccmulateTexture[id.xy] = Radiance;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static const float Bilateralkernel[25] = { float(1.0f / 256.0f), float(1.0f / 64.0f), float(3.0f / 128.0f), float(1.0f / 64.0f), float(1.0f / 256.0f), float(1.0f / 64.0f), float(1.0f / 16.0f), float(3.0f / 32.0f), float(1.0f / 16.0f), float(1.0f / 64.0f), float(3.0f / 128.0f), float(3.0f / 32.0f), float(9.0f / 64.0f), float(3.0f / 32.0f), float(3.0f / 128.0f), float(1.0f / 64.0f), float(1.0f / 16.0f), float(3.0f / 32.0f), float(1.0f / 16.0f), float(1.0f / 64.0f), float(1.0f / 256.0f), float(1.0f / 64.0f), float(3.0f / 128.0f), float(1.0f / 64.0f), float(1.0f / 256.0f) };
static const int2 BilateralOffset[25] = { int2(-2, -2), int2(-1, -2), int2(0, -2), int2(1, -2), int2(2, -2), int2(-2, -1), int2(-1, -1), int2(0, -1), int2(1, -1), int2(2, -1), int2(-2, 0), int2(-1, 0), int2(0, 0), int2(1, 0), int2(2, 0), int2(-2, 1), int2(-1, 1), int2(0, 1), int2(1, 1), int2(2, 1), int2(-2, 2), int2(-1, 2), int2(0, 2), int2(1, 2), int2(2, 2) };

///Bilateral Pass
float SVGF_BilateralRadius, SVGF_ColorWeight, SVGF_NormalWeight, SVGF_DepthWeight;
float4 SVGF_BilateralSize;
Texture2D SRV_InputColor;
RWTexture2D<float4> UAV_BilateralColor;

#pragma kernel BilateralFilter
[numthreads(16, 16, 1)]
void BilateralFilter (uint3 id : SV_DispatchThreadID)
{
	float WeightSum = 0;
	float4 ColorSum = 0;

    float2 UV = (id.xy + 0.5) * SVGF_BilateralSize.zw;
	float4 Color = SRV_AliasingTexture.SampleLevel(Global_bilinear_clamp_sampler, UV, 0);
	float4 Normal = SRV_NormalTexture.SampleLevel(Global_bilinear_clamp_sampler, UV, 0);
	float Depth = LinearEyeDepth(SRV_DepthTexture.SampleLevel(Global_bilinear_clamp_sampler, UV, 0).r);

	for(int i = 0; i < 25; i++) {
		float2 OffsetUV = UV + (BilateralOffset[i] * SVGF_BilateralSize * SVGF_BilateralRadius);

		float4 OffsetColor = SRV_AliasingTexture.SampleLevel(Global_bilinear_clamp_sampler, OffsetUV, 0);
        float4 OffsetNormal = SRV_NormalTexture.SampleLevel(Global_bilinear_clamp_sampler, OffsetUV, 0);
        float OffsetDepth = LinearEyeDepth(SRV_DepthTexture.SampleLevel(Global_bilinear_clamp_sampler, OffsetUV, 0).r);

		float4 Distance = Normal - OffsetNormal;
		float Distance2 = max( dot(Distance, Distance) / (SVGF_BilateralRadius * SVGF_BilateralRadius), 0);
		float WeightNormal = min( exp(-Distance2 / SVGF_NormalWeight), 1 );
	    float WeightDepth = (SVGF_DepthWeight == 0) ? 0 : abs(Depth - OffsetDepth) / SVGF_DepthWeight;
	    float WeightColor = abs( Luminance(Color.rgb) - Luminance(OffsetColor.rgb) ) / SVGF_ColorWeight;
        float Weight = exp(0 - max(WeightColor, 0) - max(WeightDepth, 0)) * WeightNormal;

		ColorSum += OffsetColor * Weight * Bilateralkernel[i];
		WeightSum += Weight * Bilateralkernel[i];
	}
	UAV_BilateralColor[id.xy] = ColorSum / WeightSum;
}
