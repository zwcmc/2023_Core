//#include "UnityCG.cginc"
#include "../../../../Shaders/ShaderLibrary/BSDF.hlsl"
#include "../../../../Shaders/ShaderLibrary/RayTracing/ScreenSpaceRayTrace/SSRTRayCast.hlsl"

float4x4 Matrix_Proj, Matrix_InvProj, Matrix_ViewProj, Matrix_InvViewProj, Matrix_WorldToView;
Texture2D SRV_PyramidColor, SRV_PyramidDepth, SRV_SceneDepth, SRV_GBufferNormal;
////////////////////////Raytracing Pass////////////////////////
int SSGi_RayMask, SSGi_FrameIndex, SSGi_NumRays, SSGi_NumSteps;
float SSGi_Thickness, SSGi_Intensity;
float4 SSGi_HZBUvFactor, SSGi_TraceResolution;
RWTexture2D<float4> UAV_ScreenIrradiance;

/*#pragma kernel Raytracing
[numthreads(16, 16, 1)]
void Raytracing (uint3 id : SV_DispatchThreadID)
{
    float2 UV = (id.xy + 0.5) * SSGi_TraceResolution.zw;
	uint2 PixelPosition = uint2(UV.xy * SSGi_TraceResolution.xy);

	float SceneDepth = SRV_SceneDepth.SampleLevel(Global_point_clamp_sampler, UV, 0).r;
    if (SceneDepth <= 1e-7) {
        UAV_ScreenIrradiance[id.xy] = 0;
        return;
    }
	float3 ScreenPos = GetScreenSpacePos(UV, SceneDepth);
	float3 WorldPos = GetWorldSpacePos(ScreenPos, Matrix_InvViewProj);
	float3 ViewPos = GetViewSpacePos(ScreenPos, Matrix_InvProj);
	float3 ViewDir = GetViewDir(WorldPos, ViewPos);
	float3 WorldNormal = SRV_GBufferNormal.SampleLevel(Global_point_clamp_sampler, UV, 0).xyz * 2 - 1;

	uint FrameIDMod8 = uint(fmod(SSGi_FrameIndex, 8));
	uint2 Random = Rand3DPCG16( uint3(PixelPosition, FrameIDMod8) ).xy;
	float3x3 TangentToWorld = GetTangentBasis(WorldNormal);

	float Out_AmbientOcclusion = 0;
    float4 Out_IrradianceColor = 0;

	[loop]
	for (uint i = 0; i < (uint)SSGi_NumRays; i++) {
		float2 Hash = Hammersley16(i, (uint)SSGi_NumRays, Random);

		float3 LightDir_TS;
		LightDir_TS.xy = UniformSampleDiskConcentric( Hash );
		LightDir_TS.z = sqrt( 1 - dot( LightDir_TS.xy, LightDir_TS.xy ) );
		float3 LightDir_WS = mul(LightDir_TS, TangentToWorld);
		float3 LightDir_VS = mul( (float3x3)(Matrix_WorldToView), LightDir_WS );

		float3 rayOrigin = float3(UV, ScreenPos.z);
		float4 rayDir = mul ( Matrix_Proj, float4(ViewPos + LightDir_VS, 1) );
		rayDir.xyz = normalize( (rayDir.xyz / max(rayDir.w, 1e-4)) - ScreenPos);
		rayDir.xy *= 0.5;

		float4 RayHitData = HiZ_Trace(SSGi_NumSteps * 8, SSGi_Thickness, SSGi_TraceResolution.zw, rayOrigin, rayDir.xyz, SRV_PyramidDepth);

		float3 SampleColor = SRV_PyramidColor.SampleLevel(Global_point_clamp_sampler, RayHitData.xy, 0).rgb;
		float3 SampleNormal = SRV_GBufferNormal.SampleLevel(Global_point_clamp_sampler, RayHitData.xy, 0).xyz * 2 - 1;
		float CosineWeight = 1 - saturate( dot(LightDir_WS, SampleNormal) );

		float3 ViewSpace_RayHitData = GetViewSpacePos( GetScreenSpacePos(RayHitData.xy, RayHitData.z), Matrix_InvProj );
		float3 ViewSpace_RayOrigin = GetViewSpacePos( GetScreenSpacePos(rayOrigin.xy, rayOrigin.z), Matrix_InvProj );
		Out_AmbientOcclusion += smoothstep( 0, 5, distance(ViewSpace_RayOrigin, ViewSpace_RayHitData) );
		
		SampleColor *= CosineWeight;
		SampleColor *= rcp( 1 + Luminance(SampleColor) );
        
		Out_IrradianceColor.rgb += SampleColor;
		Out_IrradianceColor.a += RayHitData.a;
	}
	Out_AmbientOcclusion /= SSGi_NumRays;
	Out_IrradianceColor /= SSGi_NumRays;
	Out_IrradianceColor.rgb *= rcp( 1 - Luminance(Out_IrradianceColor.rgb) );
    Out_IrradianceColor.a = saturate( sqrt(Out_IrradianceColor.a) );

	[branch]
	if(SSGi_RayMask == 1) {
		UAV_ScreenIrradiance[id.xy] = float4( Out_IrradianceColor.rgb * SSGi_Intensity * Out_IrradianceColor.a, Out_AmbientOcclusion );
	} else {
		UAV_ScreenIrradiance[id.xy] = float4( Out_IrradianceColor.rgb * SSGi_Intensity, Out_AmbientOcclusion );
	}
}*/

inline float ConeConeIntersection(float ArcLength0, float ArcLength1, float AngleBetweenCones)
{
	float AngleDifference = abs(ArcLength0 - ArcLength1);
	float AngleBlendAlpha = saturate((AngleBetweenCones - AngleDifference) / (ArcLength0 + ArcLength1 - AngleDifference));
	return smoothstep(0, 1, 1 - AngleBlendAlpha);
}

inline half ReflectionOcclusion(half3 BentNormal, half3 ReflectionVector, half Roughness, half OcclusionStrength)
{
	half BentNormalLength = length(BentNormal);

	half ReflectionConeAngle = max(Roughness, 0.04) * Pi;
	half UnoccludedAngle = BentNormalLength * Pi * OcclusionStrength;
	half AngleBetween = acos( dot(BentNormal, ReflectionVector) / max(BentNormalLength, 0.001) );

	half ReflectionOcclusion = ConeConeIntersection(ReflectionConeAngle, UnoccludedAngle, AngleBetween);
	return lerp(0, ReflectionOcclusion, saturate((UnoccludedAngle - 0.1) / 0.2));
}

#pragma kernel Raytracing
[numthreads(16, 16, 1)]
void Raytracing (uint3 id : SV_DispatchThreadID)
{
    float2 UV = (id.xy + 0.5) * SSGi_TraceResolution.zw;
	uint2 PixelPosition = uint2(UV.xy * SSGi_TraceResolution.xy);

	float SceneDepth = SRV_SceneDepth.SampleLevel(Global_point_clamp_sampler, UV, 0).r;
    if (SceneDepth <= 1e-7) {
        UAV_ScreenIrradiance[id.xy] = 0;
        return;
    }
	float3 NDCPos = GetNDCPos(UV, SceneDepth);
	float3 WorldPos = GetWorldSpacePos(NDCPos, Matrix_InvViewProj);
	float3 ViewPos = GetViewSpacePos(NDCPos, Matrix_InvProj);
	float3 ViewDir = GetViewDir(WorldPos, ViewPos);
	float3 WorldNormal = SRV_GBufferNormal.SampleLevel(Global_point_clamp_sampler, UV, 0).xyz * 2 - 1;
	float3x3 TangentToWorld = GetTangentBasis(WorldNormal);

	uint FrameIDMod8 = uint(fmod(SSGi_FrameIndex, 32));
	uint2 Random = Rand3DPCG16( uint3(PixelPosition, FrameIDMod8) ).xy;
	float StepOffset = InterleavedGradientNoise(PixelPosition + 0.5, FrameIDMod8) - 0.9;

	float Out_Occlusion = 0;
    float4 Out_ColorMask = 0;
	//float3 BentNormal = 0;

	[loop]
	for (uint i = 0; i < (uint)SSGi_NumRays; i++) 
	{
		//float2 Hash = Halton(i, Random);
		float2 Hash = Hammersley16(i, (uint)SSGi_NumRays, Random);
		float3 LightDir_TS = CosineSampleHemisphere(Hash).xyz;
		float3 LightDir_WS = mul(LightDir_TS, TangentToWorld);
		float3 LightDir_VS = mul((float3x3)(Matrix_WorldToView), LightDir_WS);

		float Level;
		float3 HitUVz;

		float3 RayStartScreen = NDCPos;
		float4 RayEndScreen = mul( Matrix_Proj, float4(LightDir_VS, 0) ) + float4(RayStartScreen, 1); 
		//RayEndScreen.xyz = RayEndScreen.xyz / max(RayEndScreen.w, 1e-4);
		RayEndScreen.xyz = rcp(max(RayEndScreen.w, 1e-4)) * RayEndScreen.xyz;
		float3 RayDepthScreen = 0.5 * (RayStartScreen + mul( Matrix_Proj, float4(0, 0, 1, 0) ).xyz);
		float3 RayStepScreen = RayEndScreen.xyz - RayStartScreen;
		RayStepScreen *= GetStepScreenFactorToClipAtScreenEdge(RayStartScreen.xy, RayStepScreen.xy);
		float CompareTolerance = max(abs(RayStepScreen.z), (RayStartScreen.z - RayDepthScreen.z) * 2);

		bool bHit = RayCast_Diffuse(SSGi_NumSteps, 1, CompareTolerance, StepOffset, RayStartScreen, RayStepScreen, SRV_PyramidDepth, HitUVz, Level);

		[branch] 
		if(bHit) 
		{
			float3 SampleNormal = SRV_GBufferNormal.SampleLevel(Global_point_clamp_sampler, HitUVz.xy, 0).xyz * 2 - 1;
			float CosineWeight = 1 - saturate( dot(LightDir_WS, SampleNormal) );
			Out_Occlusion += CosineWeight;

			float3 SampleColor = SRV_PyramidColor.SampleLevel(Global_point_clamp_sampler, HitUVz.xy, 0).rgb;
			SampleColor.rgb *= rcp( 1 + Luminance(SampleColor.rgb) );
			Out_ColorMask += float4(SampleColor.rgb, GetScreenFadeBord(HitUVz.xy, 0.1));

			//BentNormal += LightDir_WS;
		}
	}

	Out_Occlusion /= SSGi_NumRays;
	Out_ColorMask /= SSGi_NumRays;
	Out_ColorMask.rgb *= SSGi_Intensity;
	UAV_ScreenIrradiance[id.xy] = Out_ColorMask;

	//float3 ReflectVector = -reflect(WorldNormal, normalize(WorldPos - _WorldSpaceCameraPos));
	//float ReflecOcclusion = ReflectionOcclusion(normalize(BentNormal), ReflectVector, 0.25, 0.5);
	//UAV_ScreenIrradiance[id.xy] = ReflecOcclusion;
	//UAV_ScreenIrradiance[id.xy] = float4(normalize(BentNormal), 1);
	//UAV_ScreenIrradiance[id.xy] = dot(normalize(BentNormal), _WorldSpaceLightPos0.xyz);
}
