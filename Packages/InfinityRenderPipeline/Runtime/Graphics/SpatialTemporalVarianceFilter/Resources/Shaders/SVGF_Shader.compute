#include "UnityCG.cginc"
#include "../../../../../Shaders/ShaderLibrary/BSDF.hlsl"
#include "../../../../../Shaders/ShaderLibrary/Random.hlsl"
#include "../../../../../Shaders/ShaderLibrary/Common.hlsl"
#include "../../../../../Shaders/ShaderLibrary/RayTracing/Variance/VarianceEstimator.hlsl"

float4x4 Matrix_InvProj, Matrix_PrevViewProj, Matrix_ViewProj, Matrix_InvViewProj, Matrix_WorldToView;
Texture2D SRV_SceneDepth, SRV_GBufferNormal, SRV_GBufferRoughness, SRV_GBufferMotion;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static const float2 kStackowiakSampleSet0[56 * 4] =
{
	float2(-0.5, -0.5), float2(+0.5, -0.5), float2(-0.5, +0.5), float2(+0.5, +0.5),
	float2(-1.5, +0.5), float2(-1.5, -0.5), float2(-0.5, +1.5), float2(+1.5, -0.5),
	float2(+0.5, -1.5), float2(+2.5, -0.5), float2(+1.5, +0.5), float2(-0.5, -1.5),
	float2(-1.5, -2.5), float2(-0.5, -2.5), float2(-1.5, -1.5), float2(-0.5, +2.5),
	float2(-1.5, +1.5), float2(+1.5, -2.5), float2(-1.5, +2.5), float2(+1.5, +2.5),
	float2(+0.5, -2.5), float2(-2.5, -0.5), float2(-2.5, -1.5), float2(-2.5, +0.5),
	float2(+0.5, +1.5), float2(+0.5, +2.5), float2(-3.5, +0.5), float2(+0.5, +3.5),
	float2(+1.5, -1.5), float2(+3.5, -0.5), float2(+2.5, +1.5), float2(+3.5, +0.5),
	float2(+1.5, +1.5), float2(-2.5, +1.5), float2(-3.5, +2.5), float2(+3.5, +1.5),
	float2(-3.5, -0.5), float2(-1.5, -3.5), float2(-2.5, -2.5), float2(-2.5, +2.5),
	float2(+2.5, +0.5), float2(+2.5, +2.5), float2(+1.5, +3.5), float2(+3.5, -1.5),
	float2(-3.5, -2.5), float2(+3.5, -2.5), float2(+2.5, -1.5), float2(+0.5, -3.5),
	float2(-0.5, +3.5), float2(-0.5, -4.5), float2(-4.5, +0.5), float2(+4.5, +0.5),
	float2(-4.5, -1.5), float2(-3.5, +1.5), float2(-0.5, -3.5), float2(+1.5, -3.5),
	float2(+0.5, -4.5), float2(-1.5, +3.5), float2(+0.5, +4.5), float2(-3.5, -1.5),
	float2(-4.5, +1.5), float2(+2.5, -4.5), float2(+2.5, -2.5), float2(-1.5, +4.5),
	float2(-2.5, -4.5), float2(+4.5, -2.5), float2(+2.5, +3.5), float2(-3.5, +3.5),
	float2(-2.5, +3.5), float2(+0.5, -5.5), float2(-4.5, +3.5), float2(-2.5, -3.5),
	float2(-4.5, +2.5), float2(+3.5, +3.5), float2(+2.5, -3.5), float2(+4.5, +3.5),
	float2(+3.5, -3.5), float2(+4.5, +2.5), float2(-5.5, +1.5), float2(-4.5, -0.5),
	float2(+3.5, +2.5), float2(-0.5, +4.5), float2(-1.5, +5.5), float2(+1.5, +5.5),
	float2(+4.5, -0.5), float2(+5.5, +0.5), float2(+4.5, +1.5), float2(-1.5, -4.5),
	float2(-1.5, -5.5), float2(-4.5, -2.5), float2(-2.5, +5.5), float2(+2.5, +5.5),
	float2(+1.5, +4.5), float2(+5.5, +1.5), float2(+1.5, -4.5), float2(-3.5, -3.5),
	float2(+3.5, -4.5), float2(-3.5, -4.5), float2(+4.5, -1.5), float2(+4.5, -3.5),
	float2(-3.5, -5.5), float2(-2.5, -5.5), float2(-4.5, -3.5), float2(+4.5, +4.5),
	float2(-3.5, +4.5), float2(-2.5, +4.5), float2(-5.5, -2.5), float2(-5.5, +0.5),
	float2(+2.5, -5.5), float2(+3.5, +4.5), float2(-0.5, -5.5), float2(-0.5, +6.5),
	float2(+2.5, +4.5), float2(-5.5, -0.5), float2(-6.5, -1.5), float2(+1.5, -5.5),
	float2(-6.5, -0.5), float2(+0.5, +5.5), float2(+1.5, +6.5), float2(+6.5, +1.5),
	float2(-0.5, +5.5), float2(+6.5, -0.5), float2(-4.5, -4.5), float2(-5.5, +2.5),
	float2(+5.5, -0.5), float2(-5.5, -1.5), float2(-6.5, +3.5), float2(-1.5, +6.5),
	float2(-6.5, +0.5), float2(+4.5, -5.5), float2(-3.5, +6.5), float2(+6.5, -1.5),
	float2(+0.5, -6.5), float2(-5.5, -3.5), float2(+5.5, -2.5), float2(+4.5, -4.5),
	float2(+5.5, -1.5), float2(+3.5, -6.5), float2(+5.5, +3.5), float2(+3.5, -5.5),
	float2(-5.5, -4.5), float2(+6.5, -3.5), float2(-0.5, -6.5), float2(+3.5, +6.5),
	float2(-5.5, +3.5), float2(+0.5, +6.5), float2(+6.5, +0.5), float2(+6.5, -2.5),
	float2(-6.5, -3.5), float2(-4.5, +4.5), float2(-7.5, -0.5), float2(+7.5, +0.5),
	float2(+5.5, +2.5), float2(-0.5, -7.5), float2(+0.5, +7.5), float2(-4.5, +5.5),
	float2(+3.5, +5.5), float2(-3.5, +5.5), float2(-4.5, -5.5), float2(+4.5, +6.5),
	float2(+5.5, -4.5), float2(+4.5, +5.5), float2(-4.5, +6.5), float2(+6.5, +4.5),
	float2(-7.5, +1.5), float2(-6.5, +1.5), float2(+5.5, -3.5), float2(-6.5, +2.5),
	float2(-2.5, +6.5), float2(-1.5, -7.5), float2(+5.5, +4.5), float2(-1.5, -6.5),
	float2(-3.5, -7.5), float2(+2.5, -7.5), float2(-7.5, +2.5), float2(-6.5, -2.5),
	float2(-5.5, +5.5), float2(+2.5, +6.5), float2(-2.5, -6.5), float2(-7.5, +0.5),
	float2(-0.5, +7.5), float2(+7.5, -2.5), float2(-2.5, +7.5), float2(+0.5, -7.5),
	float2(-4.5, -7.5), float2(+7.5, +1.5), float2(+1.5, -6.5), float2(-6.5, +4.5),
	float2(-1.5, +7.5), float2(-5.5, -5.5), float2(+6.5, +2.5), float2(-3.5, -6.5),
	float2(+3.5, -7.5), float2(-5.5, +4.5), float2(+2.5, -6.5), float2(+1.5, -7.5),
	float2(+6.5, +3.5), float2(+5.5, -6.5), float2(-6.5, +5.5), float2(+7.5, +4.5),
	float2(+7.5, -1.5), float2(-7.5, -1.5), float2(+3.5, +7.5), float2(-5.5, +6.5),
	float2(+1.5, +7.5), float2(+7.5, +3.5), float2(+7.5, -0.5), float2(-7.5, -2.5),
	float2(+5.5, +5.5), float2(+6.5, +5.5), float2(+5.5, -5.5), float2(-2.5, -7.5),
	float2(+2.5, +7.5), float2(-7.5, -3.5), float2(-7.5, -4.5), float2(-6.5, -4.5),
	float2(+7.5, -3.5), float2(+5.5, +6.5), float2(-5.5, -6.5), float2(-4.5, -6.5),
	float2(+7.5, +2.5), float2(-7.5, +3.5), float2(+4.5, -6.5), float2(+7.5, -4.5),
};

static const float2 kStackowiakSampleSet1[56 * 4] =
{
    float2(-0.5, -0.5), float2(+0.5, -0.5), float2(-0.5, +0.5), float2(+0.5, +0.5),
    float2(+0.5, -1.5), float2(+1.5, -1.5), float2(-1.5, -0.5), float2(+1.5, +1.5),
    float2(-0.5, -2.5), float2(-1.5, -1.5), float2(+0.5, +1.5), float2(-1.5, +0.5),
    float2(+1.5, -0.5), float2(-0.5, +1.5), float2(-2.5, +0.5), float2(+0.5, +2.5),
    float2(-2.5, -1.5), float2(+2.5, +0.5), float2(+1.5, +0.5), float2(-0.5, -1.5),
    float2(-1.5, +1.5), float2(+2.5, -2.5), float2(-3.5, -0.5), float2(-1.5, +2.5),
    float2(-2.5, +1.5), float2(-2.5, -0.5), float2(-1.5, -2.5), float2(+2.5, -1.5),
    float2(-3.5, +0.5), float2(-0.5, -3.5), float2(-1.5, +3.5), float2(+0.5, -2.5),
    float2(+1.5, +2.5), float2(-0.5, +2.5), float2(+0.5, +3.5), float2(+3.5, +0.5),
    float2(+2.5, +1.5), float2(-2.5, -2.5), float2(+2.5, -0.5), float2(+3.5, -1.5),
    float2(-0.5, +3.5), float2(+3.5, +1.5), float2(-3.5, +2.5), float2(+3.5, +2.5),
    float2(+3.5, -0.5), float2(+0.5, -4.5), float2(-2.5, +3.5), float2(+0.5, -3.5),
    float2(-1.5, -4.5), float2(+1.5, +3.5), float2(+1.5, -2.5), float2(-3.5, +1.5),
    float2(+2.5, -3.5), float2(-2.5, -3.5), float2(+2.5, +2.5), float2(+1.5, +4.5),
    float2(-4.5, -2.5), float2(-2.5, +2.5), float2(-4.5, +1.5), float2(+4.5, +1.5),
    float2(-2.5, -4.5), float2(+3.5, -3.5), float2(-1.5, -3.5), float2(-3.5, -1.5),
    float2(+1.5, -4.5), float2(+4.5, -2.5), float2(+1.5, -3.5), float2(-1.5, +4.5),
    float2(-4.5, +2.5), float2(-4.5, -0.5), float2(+2.5, +4.5), float2(-4.5, +0.5),
    float2(-3.5, -4.5), float2(+0.5, +4.5), float2(+3.5, -2.5), float2(-3.5, -2.5),
    float2(-3.5, +3.5), float2(+3.5, +3.5), float2(+4.5, +0.5), float2(+0.5, +5.5),
    float2(-0.5, +4.5), float2(+4.5, -3.5), float2(-1.5, +5.5), float2(-0.5, -4.5),
    float2(+2.5, +3.5), float2(+4.5, +2.5), float2(-2.5, +5.5), float2(+2.5, -4.5),
    float2(+4.5, -0.5), float2(+5.5, -0.5), float2(-4.5, +4.5), float2(+5.5, -1.5),
    float2(-5.5, -1.5), float2(-4.5, -1.5), float2(+3.5, +4.5), float2(-3.5, -3.5),
    float2(-5.5, +0.5), float2(+1.5, -5.5), float2(-5.5, -2.5), float2(-3.5, +4.5),
    float2(+0.5, -5.5), float2(-2.5, -5.5), float2(+2.5, +5.5), float2(+4.5, +4.5),
    float2(+4.5, -1.5), float2(-2.5, +4.5), float2(+4.5, +3.5), float2(+0.5, +6.5),
    float2(-0.5, -6.5), float2(+5.5, +2.5), float2(-0.5, -5.5), float2(-5.5, -0.5),
    float2(-6.5, -1.5), float2(-0.5, +5.5), float2(-0.5, +6.5), float2(+6.5, -0.5),
    float2(+1.5, +5.5), float2(+1.5, -6.5), float2(+5.5, +0.5), float2(-5.5, +2.5),
    float2(+5.5, +1.5), float2(-5.5, +1.5), float2(-6.5, -0.5), float2(-1.5, -5.5),
    float2(-5.5, -4.5), float2(-4.5, +3.5), float2(-6.5, +1.5), float2(+2.5, -5.5),
    float2(+3.5, -5.5), float2(-5.5, -3.5), float2(+1.5, +6.5), float2(+6.5, +2.5),
    float2(+4.5, -4.5), float2(+3.5, -6.5), float2(-4.5, -4.5), float2(-4.5, -3.5),
    float2(-6.5, +2.5), float2(+3.5, +5.5), float2(+3.5, -4.5), float2(+5.5, -3.5),
    float2(-5.5, +4.5), float2(+6.5, -3.5), float2(-6.5, -2.5), float2(+5.5, +4.5),
    float2(-1.5, +6.5), float2(-0.5, -7.5), float2(-6.5, +3.5), float2(-5.5, +3.5),
    float2(-6.5, -4.5), float2(+7.5, -1.5), float2(-3.5, -5.5), float2(+3.5, +6.5),
    float2(+5.5, +3.5), float2(+7.5, +0.5), float2(+5.5, -2.5), float2(-6.5, +0.5),
    float2(-7.5, +1.5), float2(-3.5, -6.5), float2(+6.5, +0.5), float2(+7.5, +1.5),
    float2(-2.5, -7.5), float2(-3.5, +5.5), float2(-7.5, -0.5), float2(-3.5, +6.5),
    float2(-2.5, +6.5), float2(+4.5, -6.5), float2(-5.5, +5.5), float2(+4.5, -5.5),
    float2(+6.5, -2.5), float2(+6.5, +3.5), float2(-1.5, -6.5), float2(-1.5, +7.5),
    float2(+6.5, +1.5), float2(-5.5, -5.5), float2(+0.5, -6.5), float2(+7.5, +3.5),
    float2(+2.5, +6.5), float2(-4.5, +5.5), float2(-6.5, -3.5), float2(-4.5, -5.5),
    float2(-6.5, -5.5), float2(+5.5, -6.5), float2(-2.5, -6.5), float2(+5.5, -5.5),
    float2(+4.5, +5.5), float2(-7.5, +0.5), float2(+6.5, -1.5), float2(+0.5, -7.5),
    float2(+7.5, -0.5), float2(-3.5, -7.5), float2(+2.5, -6.5), float2(-3.5, +7.5),
    float2(-4.5, -7.5), float2(-0.5, +7.5), float2(-6.5, +5.5), float2(+7.5, -3.5),
    float2(-4.5, +6.5), float2(+1.5, +7.5), float2(+5.5, -4.5), float2(+7.5, +4.5),
    float2(+0.5, +7.5), float2(+4.5, +6.5), float2(-4.5, +7.5), float2(-7.5, -1.5),
    float2(+3.5, -7.5), float2(+7.5, -4.5), float2(+3.5, +7.5), float2(-1.5, -7.5),
    float2(+6.5, -4.5), float2(-7.5, -3.5), float2(+6.5, +4.5), float2(+2.5, -7.5),
    float2(+7.5, -2.5), float2(-7.5, +2.5), float2(+1.5, -7.5), float2(-5.5, +6.5),
    float2(+5.5, +5.5), float2(-2.5, +7.5), float2(+7.5, +2.5), float2(-7.5, -2.5),
    float2(+2.5, +7.5), float2(-6.5, +4.5), float2(+5.5, +6.5), float2(-4.5, -6.5),
};

static const int2 kStackowiakSampleSet2[16] ={int2(0, 0), int2(0, 1), int2(1, 0), int2(1, 1), int2(0, -1), int2(-1, -2), int2(-1, 0), int2(0, 2), int2(1, -1), int2(-1, 1), int2(-1, 2), int2(1, 2), int2(2, -1), int2(2, 0), int2(2, 1), int2(2, 2)};

static const int2 kStackowiakSampleSet3[9] = { int2(0, 0), int2(1, -1), int2(-1, -1), int2(0, 1), int2(1, 0), int2(1, 1), int2(0, -1), int2(-1, 0), int2(-1, 1) };

static const int2 kStackowiakSampleSet4[15] = { int2(0, 1), int2(-2, 1), int2(2, -3), int2(-3, 0), int2(1, 2), int2(-1, -2), int2(3, 0), int2(-3, 3), int2(0, -3), int2(-1, -1), int2(2, 1), int2(-2, -2), int2(1, 0), int2(0, 2), int2(3, -1) };


float BRDF_SSR(float3 V, float3 L, float3 N, float Roughness)
{
	float3 H = normalize(L + V);

	float NoH = max(dot(N, H), 0);
	float NoL = max(dot(N, L), 0);
	float NoV = max(dot(N, V), 0);

	float D = D_GGX(NoH, Roughness);
    float G = Vis_SmithJoint_NoPI(NoL, NoV, Roughness);

    return max(0, D * G);
}

float GetEdgeStoppNormalWeight(float3 normal_p, float3 normal_q, float sigma)
{
    return pow(max(dot(normal_p, normal_q), 0.0), sigma);
}

float GetEdgeStopDepthWeight(float x, float m, float sigma)
{
    float a = length(x - m) / sigma;
    a *= a;
    return exp(-0.5 * a);
}

///Spatial Pass
#define SVGF_NumSpatial 15
int SVGF_FrameIndex;
float4 SVGF_SpatialSize, SVGF_SpatialRadius;
Texture2D SRV_UWVPDF, SRV_ColorMask;
RWTexture2D<float4> UAV_SpatialColor;

#pragma kernel SpatialFilter 
[numthreads(16, 16, 1)]
void SpatialFilter (uint3 id : SV_DispatchThreadID)
{
    float2 UV = (id.xy + 0.5) * SVGF_SpatialSize.zw;
    uint2 PixelPosition = uint2(UV.xy * SVGF_SpatialSize.xy);
	float SceneDepth = SRV_SceneDepth.SampleLevel(Global_point_clamp_sampler, UV, 0).r;
    if (SceneDepth <= 1e-7) {
        UAV_SpatialColor[id.xy] = 0;
        return;
    }
	float3 WorldNormal = SRV_GBufferNormal.SampleLevel(Global_point_clamp_sampler, UV, 0).xyz * 2 - 1;
    float Roughness = clamp( 1 - SRV_GBufferRoughness.SampleLevel(Global_point_clamp_sampler, UV, 0).a, 0.02, 1 );
    float3 ViewNormal = mul( (float3x3)Matrix_WorldToView, WorldNormal );
    float3 NDCPos = GetNDCPos(UV, SceneDepth);
    float3 WorldSpacePos = GetWorldSpacePos(NDCPos, Matrix_InvViewProj);
    float3 ViewSpacePos = GetViewSpacePos(NDCPos, Matrix_InvProj);

	float NumWeight;
	float4 ReflecttionColor;

	uint2 Random = Rand3DPCG16( uint3(id.xy + 0.5, SVGF_FrameIndex) ).xy;

    float3 MomentA, MomentB;

	[loop]
	for (int i = 0; i < SVGF_NumSpatial; ++i) {
        float2 OffsetRotation = (Hammersley16(i, SVGF_NumSpatial, Random) * 2 - 1);
        float2x2 OffsetRotationMatrix = float2x2(OffsetRotation.x, OffsetRotation.y, -OffsetRotation.y, OffsetRotation.x);
        
        float2 Offset_UV = kStackowiakSampleSet4[i] * SVGF_SpatialSize.zw;
        Offset_UV = UV + mul(OffsetRotationMatrix, Offset_UV * SVGF_SpatialRadius);

        float OffsetDepth = SRV_SceneDepth.SampleLevel(Global_point_clamp_sampler, Offset_UV, 0).r;
        float3 OffsetNormal = SRV_GBufferNormal.SampleLevel(Global_point_clamp_sampler, Offset_UV, 0).xyz * 2 - 1;

		float4 HitUWVPDF = SRV_UWVPDF.SampleLevel(Global_bilinear_repeat_sampler, Offset_UV, 0);
		float4 HitColorMask = SRV_ColorMask.SampleLevel(Global_bilinear_repeat_sampler, Offset_UV, 0);
		float3 Hit_ViewSpacePos = GetViewSpacePos( GetNDCPos(HitUWVPDF.xy, HitUWVPDF.z), Matrix_InvProj );

		///Variance Accmulation
        MomentA += HitColorMask.rgb;
        MomentB += HitColorMask.rgb * HitColorMask.rgb;

		//////Weight
        float DepthWeight = GetEdgeStopDepthWeight(SceneDepth, OffsetDepth, 0.001);
        float NormalWeight = GetEdgeStoppNormalWeight(WorldNormal, OffsetNormal, 32);
        float BRDFWeight = BRDF_SSR(normalize(-ViewSpacePos), normalize(Hit_ViewSpacePos - ViewSpacePos), ViewNormal, Roughness) * HitUWVPDF.a;
		float Weight = lerp(DepthWeight * NormalWeight, BRDFWeight, 0.75);

        NumWeight += Weight;

		///SpatioSampler
        ReflecttionColor += float4(HitColorMask.rgb * Weight, HitColorMask.a);
	}
    ReflecttionColor.a /= SVGF_NumSpatial;
	ReflecttionColor.rgb /= NumWeight;
	ReflecttionColor.rgb = max(1e-5, ReflecttionColor);

    MomentA /= SVGF_NumSpatial;
    MomentB /= SVGF_NumSpatial;
    float3 VarianceColor = (MomentB - MomentA * MomentA);
    float Variance = max(VarianceColor.r, max(VarianceColor.g, VarianceColor.b));

    UAV_SpatialColor[id.xy] = ReflecttionColor;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float ComputeTemporalVariance(float3 History_Radiance, float3 Radiance)
{
    // Check temporal variance. 
    float history_luminance = Luminance(History_Radiance);
    float luminance = Luminance(Radiance);
    return abs(history_luminance - luminance) / max(max(history_luminance, luminance), 0.00001);
}

/*float ComputeTemporalVariance(float3 History_Radiance, float3 Radiance)
{
    // Check temporal variance. 
    float3 MomentB = History_Radiance;
    float3 MomentA = Radiance;
    float3 Variance = (MomentB - MomentA * MomentA);
    return max(Variance.r, max(Variance.g, Variance.b));
}*/

float4 ClipAABB(float4 prevSample, float4 aabbMin, float4 aabbMax)
{
    float4 p_clip = 0.5 * (aabbMax + aabbMin);
    float4 e_clip = 0.5 * (aabbMax - aabbMin);

    float4 v_clip = prevSample - p_clip;
    float4 v_unit = v_clip / e_clip;
    float4 a_unit = abs(v_unit);
    float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));

    [branch]
    if (ma_unit > 1) {
        return p_clip + v_clip / ma_unit;
    } else {
        return prevSample;
    }
}

static const int2 TemportalOffset[9] = { int2(-1, -1), int2(0, -1), int2(1, -1), int2(-1, 0), int2(0, 0), int2(1, 0), int2(-1, 1), int2(0, 1), int2(1, 1) };

///Temporal Pass
#define VARIANCE_THRESHOLD 0.0005
float SVGF_TemporalScale, SVGF_TemporalWeight;
float4 SVGF_TemporalSize;
Texture2D SRV_CurrColor, SRV_PrevColor, SRV_RayDepth;
RWTexture2D<float4> UAV_TemporalColor;

#pragma kernel TemporalFilter
[numthreads(16, 16, 1)]
void TemporalFilter (uint3 id : SV_DispatchThreadID)
{
    float2 UV = (id.xy + 0.5) * SVGF_TemporalSize.zw;

    float HitDepth = SRV_RayDepth.SampleLevel(Global_bilinear_repeat_sampler, UV, 0).z;
    float2 HitMotion = GetMotionVector(HitDepth, UV, Matrix_InvViewProj, Matrix_PrevViewProj, Matrix_ViewProj);
    float2 DepthMotion = SRV_GBufferMotion.SampleLevel(Global_bilinear_repeat_sampler, UV, 0).xy;

    float4 SampleColors[9]; 
    float4 CurrColor, PrevColor, MomentA, MomentB;

    [loop]
    for(int i = 0; i < 9; ++i) {
        SampleColors[i] = SRV_CurrColor.SampleLevel(Global_bilinear_repeat_sampler, UV + (TemportalOffset[i] * SVGF_TemporalSize.zw), 0);

        MomentA += SampleColors[i];
        MomentB += SampleColors[i] * SampleColors[i];
    }

    float4 Mean = MomentA / 9;
    float4 Stddev = sqrt( (MomentB / 9) - pow2(Mean) );

    CurrColor = SampleColors[4];
    float4 MinColor = Mean - SVGF_TemporalScale * Stddev;
    float4 MaxColor = Mean + SVGF_TemporalScale * Stddev;
    MinColor = min(MinColor, CurrColor); 
    MaxColor = max(MaxColor, CurrColor);

    float2 PrevUV = UV - DepthMotion;
    float2 RayPrevUV = UV - HitMotion;

    if ( any(PrevUV < 0) && any(PrevUV > 1) && any(RayPrevUV < 0) && any(RayPrevUV > 1) ) { 
		PrevColor = CurrColor;
	} else {
        //PrevColor = SRV_PrevColor.SampleLevel(Global_bilinear_repeat_sampler, RayPrevUV, 0);
        //PrevColor = clamp(PrevColor, MinColor, MaxColor);

        float4 RayProject_PrevColor = SRV_PrevColor.SampleLevel(Global_bilinear_repeat_sampler, RayPrevUV, 0);
        float4 RayProject_Dist = ( RayProject_PrevColor - Mean ) / Stddev;
        float RayProject_Weight = exp2( -10 * Luminance(RayProject_Dist) );

        float4 DepthProject_PrevColor = SRV_PrevColor.SampleLevel(Global_bilinear_repeat_sampler, PrevUV, 0);
        float4 DepthProject_Dist = (DepthProject_PrevColor - Mean) / Stddev;
        float DepthProject_Weight = exp2( -10 * Luminance(DepthProject_Dist) );

        PrevColor = (RayProject_PrevColor * RayProject_Weight + DepthProject_PrevColor * DepthProject_Weight) / (RayProject_Weight + DepthProject_Weight);
        PrevColor = clamp(PrevColor, MinColor, MaxColor);
	}
	float BlendWeight = saturate( SVGF_TemporalWeight * (1 - length(HitMotion) * 8) * (1 - length(DepthMotion) * 8) );

    float4 Radiance = max(0.001, lerp(CurrColor, PrevColor, BlendWeight));
    float Variance = ComputeTemporalVariance(PrevColor.rgb, Radiance.rgb) > VARIANCE_THRESHOLD ? 0 : 1;

	UAV_TemporalColor[id.xy] = float4(Radiance.rgb, Variance);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static const float Bilateralkernel[25] = { float(1.0f / 256.0f), float(1.0f / 64.0f), float(3.0f / 128.0f), float(1.0f / 64.0f), float(1.0f / 256.0f), float(1.0f / 64.0f), float(1.0f / 16.0f), float(3.0f / 32.0f), float(1.0f / 16.0f), float(1.0f / 64.0f), float(3.0f / 128.0f), float(3.0f / 32.0f), float(9.0f / 64.0f), float(3.0f / 32.0f), float(3.0f / 128.0f), float(1.0f / 64.0f), float(1.0f / 16.0f), float(3.0f / 32.0f), float(1.0f / 16.0f), float(1.0f / 64.0f), float(1.0f / 256.0f), float(1.0f / 64.0f), float(3.0f / 128.0f), float(1.0f / 64.0f), float(1.0f / 256.0f) };
static const int2 BilateralOffset[25] = { int2(-2, -2), int2(-1, -2), int2(0, -2), int2(1, -2), int2(2, -2), int2(-2, -1), int2(-1, -1), int2(0, -1), int2(1, -1), int2(2, -1), int2(-2, 0), int2(-1, 0), int2(0, 0), int2(1, 0), int2(2, 0), int2(-2, 1), int2(-1, 1), int2(0, 1), int2(1, 1), int2(2, 1), int2(-2, 2), int2(-1, 2), int2(0, 2), int2(1, 2), int2(2, 2) };

///Bilateral Pass
float SVGF_BilateralRadius, SVGF_ColorWeight, SVGF_NormalWeight, SVGF_DepthWeight;
float4 SVGF_BilateralSize;
Texture2D SRV_InputColor;
RWTexture2D<float4> UAV_BilateralColor;

#pragma kernel BilateralFilter
[numthreads(16, 16, 1)]
void BilateralFilter (uint3 id : SV_DispatchThreadID)
{
	float WeightSum = 0;
	float4 ColorSum = 0;

    float2 UV = (id.xy + 0.5) * SVGF_BilateralSize.zw;
	float4 Color = SRV_InputColor.SampleLevel(Global_bilinear_repeat_sampler, UV, 0);
	float4 Normal = SRV_GBufferNormal.SampleLevel(Global_bilinear_repeat_sampler, UV, 0);
	float Depth = LinearEyeDepth(SRV_SceneDepth.SampleLevel(Global_bilinear_repeat_sampler, UV, 0).r);

	for(int i = 0; i < 25; ++i) {
		float2 OffsetUV = UV + (BilateralOffset[i] * SVGF_BilateralSize * SVGF_BilateralRadius);

		float4 OffsetColor = SRV_InputColor.SampleLevel(Global_bilinear_repeat_sampler, OffsetUV, 0);
        float4 OffsetNormal = SRV_GBufferNormal.SampleLevel(Global_bilinear_repeat_sampler, OffsetUV, 0);
        float OffsetDepth = LinearEyeDepth(SRV_SceneDepth.SampleLevel(Global_bilinear_repeat_sampler, OffsetUV, 0).r);

		float4 Distance = Normal - OffsetNormal;
		float Distance2 = max( dot(Distance, Distance) / (SVGF_BilateralRadius * SVGF_BilateralRadius), 0);
		float WeightNormal = min( exp(-Distance2 / SVGF_NormalWeight), 1 );
	    float WeightDepth = (SVGF_DepthWeight == 0) ? 0 : abs(Depth - OffsetDepth) / SVGF_DepthWeight;
	    float WeightColor = abs( Luminance(Color.rgb) - Luminance(OffsetColor.rgb) ) / SVGF_ColorWeight;
        float Weight = exp(0 - max(WeightColor, 0) - max(WeightDepth, 0)) * WeightNormal;

		ColorSum += OffsetColor * Weight * Bilateralkernel[i];
		WeightSum += Weight * Bilateralkernel[i];
	}
	UAV_BilateralColor[id.xy] = ColorSum / WeightSum;
}







		/*float4 Distance = Color - OffsetColor;
		float Distance2 = dot(Distance, Distance);
		float WeightColor = min( exp(-Distance2 / ColorWeight), 1 );
		Distance = Normal - OffsetNormal;
		Distance2 = max( dot(Distance, Distance) / (FilterRadius * FilterRadius), 0);
		float WeightNormal = min( exp(-Distance2 / NormalWeight), 1 );
		float WeightDepth = min( exp( -pow2(OffsetDepth - Depth) / DepthWeight ), 1 );
		float Weight = WeightColor * WeightNormal * WeightDepth;*/