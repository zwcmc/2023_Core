#pragma kernel Main

float4 TAA_Resolution;
float4 TAA_BlendParameter; // x: static, y: dynamic, z: motion amplification, w: temporalScale
Texture2D SRV_DepthTexture;
Texture2D SRV_MotionTexture;
Texture2D SRV_HistoryTexture;
Texture2D SRV_AliasingTexture;
RWTexture2D<float4> UAV_AccmulateTexture;

static const int2 SampleOffsets[9] = { int2(-1, -1), int2(0, -1), int2(1, -1), int2(-1, 0), int2(0, 0), int2(1, 0), int2(-1, 1), int2(0, 1), int2(1, 1) };
static const int2 NeighborOffsets[8] = { int2(-1, -1), int2(0, -1), int2(1, -1), int2(-1, 0), int2(1, 1), int2(1, 0), int2(-1, 1), int2(0, -1) };

#include "../../../../Shaders/ShaderLibrary/Common.hlsl"
#include "../../../../Shaders/ShaderLibrary/ShaderVariables.hlsl"

float4 ClipAABB(float4 color, float4 aabbMin, float4 aabbMax)
{
#if 0
    float4 p_clip = 0.5 * (aabbMax + aabbMin);
    float4 e_clip = 0.5 * (aabbMax - aabbMin);

    float4 v_clip = color - p_clip;
    float4 v_unit = v_clip / e_clip;
    float4 a_unit = abs(v_unit);
    float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));

    [branch]
    if (ma_unit > 1) {
        return p_clip + v_clip / ma_unit;
    } else {
        return color;
    }
#else
    // Note: only clips towards aabb center (but fast!)
    float3 center = 0.5 * (aabbMax.rgb + aabbMin.rgb);
    float3 extents = 0.5 * (aabbMax.rgb - aabbMin.rgb);

    // This is actually `distance`, however the keyword is reserved
    float3 offset = color.rgb - center;

    float3 ts = abs(extents / (offset + 0.0001));
    float t = saturate(Min3(ts.x, ts.y, ts.z));
    color.rgb = center + offset * t;
    return color;
#endif
}

#if 0 //defined(UNITY_REVERSED_Z)
    #define COMPARE_DEPTH(a, b) step(b, a)
#else
    #define COMPARE_DEPTH(a, b) step(a, b)
#endif

float2 GetClosestFragment(float2 uv)
{
    float neighborhood[9];
    [unroll]
    for(uint i = 0; i < 8; ++i) 
    {
        neighborhood[i] = SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0, NeighborOffsets[i]).r;
    }

    float3 result = float3(0, 0, SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0).r);

    [unroll]
    for(uint j = 0; j < 8; ++j) 
    {
        result = lerp(result, float3(NeighborOffsets[j], neighborhood[j]), COMPARE_DEPTH(neighborhood[j], result.z));
    }

    return (uv + result.xy * TAA_Resolution.zw);
}

[numthreads(16, 16, 1)]
void Main (uint3 id : SV_DispatchThreadID)
{
    float2 screenUV = (id.xy + 0.5) * TAA_Resolution.zw;
    float2 unJitterUV = screenUV - TAAJitter.xy;

    float2 velocity = SRV_MotionTexture.SampleLevel(Global_point_clamp_sampler, GetClosestFragment(screenUV), 0).xy;
    float velocityLength = length(velocity);

    float totalWeight = 0;
    float sampleWeights[9];
    float4 sampleColors[9];

    [unroll]
    for(uint i = 0; i < 9; ++i) 
    {
        sampleColors[i] = SRV_AliasingTexture.SampleLevel(Global_bilinear_clamp_sampler, unJitterUV, 0, SampleOffsets[i]);
    }

    #if 0
        [unroll]
        for(uint j = 0; j < 9; ++j) 
        {
            sampleWeights[j] = HdrWeight4(sampleColors[j].rgb, 100);
            totalWeight += sampleWeights[j];
        }
        sampleColors[4] = (sampleColors[0] * sampleWeights[0] + sampleColors[1] * sampleWeights[1] + sampleColors[2] * sampleWeights[2] +  sampleColors[3] * sampleWeights[3] + sampleColors[4] * sampleWeights[4] + sampleColors[5] * sampleWeights[5] +  sampleColors[6] * sampleWeights[6] + sampleColors[7] * sampleWeights[7] + sampleColors[8] * sampleWeights[8]) / totalWeight;
    #endif

    float4 m1 = 0; 
    float4 m2 = 0;

    [unroll]
    for(uint x = 0; x < 9; ++x) 
    {
        m1 += sampleColors[x];
        m2 += sampleColors[x] * sampleColors[x];
    }

    float4 mean = m1 / 9;
    float4 stddev = sqrt((m2 / 9) - pow2(mean));

    //float aabbScale = lerp(1, 0.75, saturate(velocityLength * 64)) * TAA_BlendParameter.w;
    float4 minColor = mean - TAA_BlendParameter.w * stddev;
    float4 maxColor = mean + TAA_BlendParameter.w * stddev;

    float4 currColor = sampleColors[4];
    minColor = min(minColor, currColor);
    maxColor = max(maxColor, currColor);
    
    float4 corners = ((sampleColors[0] + sampleColors[8] + sampleColors[2] + sampleColors[6]) - currColor) * 2;
    currColor += (currColor - (corners * 0.167)) * 2.718 * 0.25; //0.25 is sharpness
    currColor = clamp(currColor, 0, 65472);

    float4 lastColor = SRV_HistoryTexture.SampleLevel(Global_bilinear_clamp_sampler, screenUV - velocity, 0);
    lastColor = ClipAABB(lastColor, minColor, maxColor);

    float weight = clamp(lerp(TAA_BlendParameter.x, TAA_BlendParameter.y, velocityLength * TAA_BlendParameter.z), TAA_BlendParameter.y, TAA_BlendParameter.x);
    UAV_AccmulateTexture[id.xy] = clamp(lerp(currColor, lastColor, weight), 0, 65472);
}

/*float2 GetClosestFragment(float2 uv)
{
    const float4 neighborhood = float4(
        SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0,  int2(-1, -1)).r,
        SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0,  int2(1, -1)).r,
        SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0,  int2(-1, 1)).r,
        SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0,  int2(1, 1)).r
    );

    float3 result = float3(0.0, 0.0, SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0).r);
    result = lerp(result, float3(-1.0, -1.0, neighborhood.x), COMPARE_DEPTH(neighborhood.x, result.z));
    result = lerp(result, float3( 1.0, -1.0, neighborhood.y), COMPARE_DEPTH(neighborhood.y, result.z));
    result = lerp(result, float3(-1.0,  1.0, neighborhood.z), COMPARE_DEPTH(neighborhood.z, result.z));
    result = lerp(result, float3( 1.0,  1.0, neighborhood.w), COMPARE_DEPTH(neighborhood.w, result.z));

    return (uv + result.xy * TAA_Resolution.zw);
}

[numthreads(16, 16, 1)]
void Main (uint3 id : SV_DispatchThreadID)
{
    float2 screenUV = (id.xy + 0.5) * TAA_Resolution.zw;
    float2 unJitterUV = screenUV - TAAJitter.xy;

    float4 color = SRV_AliasingTexture.SampleLevel(Global_point_clamp_sampler, unJitterUV, 0);
    float2 motion = SRV_MotionTexture.SampleLevel(Global_point_clamp_sampler, GetClosestFragment(screenUV), 0).xy;

    float4 topLeft = SRV_AliasingTexture.SampleLevel(Global_point_clamp_sampler, unJitterUV, 0, int2(-1, -1));
    float4 bottomRight = SRV_AliasingTexture.SampleLevel(Global_point_clamp_sampler, unJitterUV, 0, int2(1, 1));

    float4 corners = 4.0 * (topLeft + bottomRight) - 2.0 * color;

    // Sharpen output
    color += (color - (corners * 0.166667)) * 2.718282 * 0.25;
    color = clamp(color, 0.0, 65536);

    // Tonemap color and history samples
    float4 average = (corners + color) * 0.142857;

    float4 history = SRV_HistoryTexture.SampleLevel(Global_point_clamp_sampler, screenUV - motion, 0);

    float motionLength = length(motion);
    float2 luma = float2(ColorLuminance(average.rgb), ColorLuminance(color.rgb));
    //float nudge = 4.0 * abs(luma.x - luma.y);
    float nudge = lerp(4.0, 0.25, saturate(motionLength * 100.0)) * abs(luma.x - luma.y);

    float4 minimum = min(bottomRight, topLeft) - nudge;
    float4 maximum = max(topLeft, bottomRight) + nudge;

    // Clip history samples
    history = ClipAABB(history, minimum, maximum);

    // Blend method
    float weight = clamp(lerp(TAA_BlendParameter.x, TAA_BlendParameter.y, motionLength * TAA_BlendParameter.z), TAA_BlendParameter.y, TAA_BlendParameter.x);
    UAV_AccmulateTexture[id.xy] = clamp(lerp(color, history, weight), 0, 65472);
}*/
